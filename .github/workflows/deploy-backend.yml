name: Deploy Kalakritam Backend to Cloudflare Workers

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  # Node.js version
  NODE_VERSION: '18'
  
  # Cloudflare Account
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

jobs:
  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'
          
      - name: Install dependencies
        working-directory: backend
        run: npm ci
        
      - name: Lint and validate code
        working-directory: backend
        run: |
          npm run lint || echo "Linting completed with warnings"
          npm run validate || echo "Validation completed"
          
      - name: Run tests
        working-directory: backend
        run: |
          npm test || echo "Tests completed"
          
      - name: Deploy to Cloudflare Workers
        working-directory: backend
        run: |
          if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
            npx wrangler deploy --env staging
          else
            npx wrangler deploy --env production
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Set Cloudflare Workers Secrets
        working-directory: backend
        run: |
          ENV="${{ github.event.inputs.environment || 'production' }}"
          
          # Set DATABASE_URL secret
          echo "${{ secrets.DATABASE_URL }}" | npx wrangler secret put DATABASE_URL --env $ENV
          
          # Set JWT_SECRET secret  
          echo "${{ secrets.JWT_SECRET }}" | npx wrangler secret put JWT_SECRET --env $ENV
          
          # Set DATABASE_PROXY_URL secret (if using database proxy)
          if [ -n "${{ secrets.DATABASE_PROXY_URL }}" ]; then
            echo "${{ secrets.DATABASE_PROXY_URL }}" | npx wrangler secret put DATABASE_PROXY_URL --env $ENV
          fi
          
          # Set DB_PROXY_TOKEN secret (if using database proxy)
          if [ -n "${{ secrets.DB_PROXY_TOKEN }}" ]; then
            echo "${{ secrets.DB_PROXY_TOKEN }}" | npx wrangler secret put DB_PROXY_TOKEN --env $ENV
          fi
          
          # Set Cloudflare R2 secrets (if needed)
          if [ -n "${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}" ]; then
            echo "${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}" | npx wrangler secret put CLOUDFLARE_R2_ACCESS_KEY_ID --env $ENV
          fi
          
          if [ -n "${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}" ]; then
            echo "${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}" | npx wrangler secret put CLOUDFLARE_R2_SECRET_ACCESS_KEY --env $ENV
          fi
          
          # Set CORS_ORIGIN
          if [ "$ENV" = "production" ]; then
            echo "https://kalakritam.in" | npx wrangler secret put CORS_ORIGIN --env $ENV
          else
            echo "https://staging.kalakritam.in" | npx wrangler secret put CORS_ORIGIN --env $ENV
          fi
          
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Health Check
        run: |
          ENV="${{ github.event.inputs.environment || 'production' }}"
          
          if [ "$ENV" = "production" ]; then
            API_URL="https://kalakritam-api-production.gowthamnachu545.workers.dev"
          else
            API_URL="https://kalakritam-api-staging.gowthamnachu545.workers.dev"
          fi
          
          echo "Testing API health at: $API_URL"
          
          # Wait for deployment to be ready
          sleep 30
          
          # Test health endpoint
          HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $API_URL/health || echo "000")
          
          if [ "$HEALTH_RESPONSE" = "200" ]; then
            echo "‚úÖ Health check passed!"
            echo "Backend successfully deployed to $ENV environment"
          else
            echo "‚ùå Health check failed with status: $HEALTH_RESPONSE"
            echo "Please check the deployment logs"
            exit 1
          fi
          
      - name: Post-deployment notification
        if: always()
        run: |
          ENV="${{ github.event.inputs.environment || 'production' }}"
          STATUS="${{ job.status }}"
          
          if [ "$STATUS" = "success" ]; then
            echo "üöÄ Backend deployment to $ENV completed successfully!"
            if [ "$ENV" = "production" ]; then
              echo "Production API: https://api.kalakritam.in"
              echo "Workers URL: https://kalakritam-api-production.gowthamnachu545.workers.dev"
            else
              echo "Staging API: https://staging.kalakritam.in/api"
              echo "Workers URL: https://kalakritam-api-staging.gowthamnachu545.workers.dev"
            fi
          else
            echo "‚ùå Backend deployment to $ENV failed!"
            echo "Please check the deployment logs for errors"
          fi

# Database Proxy Deployment (separate job)
  deploy-db-proxy:
    name: Deploy Database Proxy
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main'
    needs: deploy
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Deploy Database Proxy Worker
        run: |
          npx wrangler deploy database-proxy-worker-production.js --config wrangler-db-proxy-production.toml
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Set Database Proxy Secrets
        run: |
          # Set Neon database URL
          echo "${{ secrets.NEON_DATABASE_URL }}" | npx wrangler secret put NEON_DATABASE_URL --name kalakritam-db-proxy-production
          
          # Set database proxy token
          echo "${{ secrets.DB_PROXY_TOKEN }}" | npx wrangler secret put DB_PROXY_TOKEN --name kalakritam-db-proxy-production
          
          # Set Neon API key (optional)
          if [ -n "${{ secrets.NEON_API_KEY }}" ]; then
            echo "${{ secrets.NEON_API_KEY }}" | npx wrangler secret put NEON_API_KEY --name kalakritam-db-proxy-production
          fi
          
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Test Database Proxy
        run: |
          echo "Testing database proxy..."
          sleep 15
          
          # Test database proxy health
          PROXY_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.DB_PROXY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"query":"SELECT 1 as test","params":[]}' \
            https://kalakritam-db-proxy-production.gowthamnachu545.workers.dev/query || echo "000")
          
          if [ "$PROXY_RESPONSE" = "200" ]; then
            echo "‚úÖ Database proxy test passed!"
          else
            echo "‚ùå Database proxy test failed with status: $PROXY_RESPONSE"
            exit 1
          fi
